// build.gradle
// Gradle 빌드 스크립트 파일 - 프로젝트의 의존성과 빌드 설정을 정의합니다.

plugins {
	// 자바 컴파일 플러그인
	id 'java'
	// Spring Boot 프로젝트를 빌드하기 위한 플러그인 (버전 3.4.5)
	id 'org.springframework.boot' version '3.2.5'
	// 스프링의 의존성 관리 기능을 활용하기 위한 플러그인
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.hibernate.orm' version '6.6.8.Final'
	id 'org.graalvm.buildtools.native' version '0.10.5'
}

// 프로젝트 그룹 ID (Maven 좌표 시스템의 일부)
group = 'com.linkedout'
// 프로젝트 버전 (0.0.1-SNAPSHOT은 개발 중인 초기 버전을 의미)
version = '0.0.1-SNAPSHOT'

// 자바 언어 버전 설정
java {
	toolchain {
		// Java 17 사용 설정
		languageVersion = JavaLanguageVersion.of(17)
	}
}

// 의존성 설정 그룹 구성
configurations {
	// compileOnly 설정이 annotationProcessor 설정을 확장하도록 함
	// 이를 통해 Lombok과 같은 애노테이션 프로세서를 더 쉽게 관리
	compileOnly {
		extendsFrom annotationProcessor
	}
}

// 의존성을 다운로드할 저장소 설정
repositories {
	// Maven 중앙 저장소 사용
	mavenLocal()
	mavenCentral()
}

// 프로젝트 외부 속성 설정
ext {
	// Spring Cloud 버전 설정 (2023.0.5)
	// Spring Cloud는 분산 시스템 패턴(서비스 디스커버리, 게이트웨이 등)을 쉽게 구현하기 위한 도구 모음
	set('springCloudVersion', "2023.0.5")
}

// 의존성 관리 설정
dependencyManagement {
	imports {
		// Spring Cloud BOM(Bill of Materials)을 가져와서 Spring Cloud 의존성 버전을 일관되게 관리
		// BOM은 의존성 버전 관리를 간소화해주는 특별한 POM 파일
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// 프로젝트 의존성 목록
dependencies {
	// 스프링 부트 기본 스타터 - 스프링 부트 핵심 기능
	implementation 'org.springframework.boot:spring-boot-starter'

	// Spring Cloud Gateway 스타터 - API 게이트웨이 구현에 필요한 라이브러리
	// 라우팅, 필터링, 로드밸런싱 등의 기능 제공
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'

	// RabbitMQ 스타터 - AMQP 메시지 브로커와 통신하기 위한 라이브러리
	// 메시지 큐를 통한 비동기 통신 구현에 사용
	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	// WebFlux 스타터 - 리액티브 웹 애플리케이션 구현에 필요한 라이브러리
	// 비동기, 논블로킹 HTTP 요청 처리를 위한 리액티브 웹 프레임워크
	// Mono/Flux 등의 리액티브 타입을 사용할 수 있게 해줌
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// Lombok - 반복적인 코드(게터, 세터, 생성자 등)를 줄여주는 애노테이션 프로세서
	// compileOnly로 설정하여 컴파일 시에만 사용되고 런타임에는 포함되지 않음
	compileOnly 'org.projectlombok:lombok'

	// 개발 도구 - 개발 중 자동 재시작 등의 기능 제공
	// developmentOnly로 설정하여 개발 환경에서만 포함되고 프로덕션 환경에서는 제외됨
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Lombok 애노테이션 프로세서 - 컴파일 시점에 Lombok 애노테이션을 처리
	annotationProcessor 'org.projectlombok:lombok'

	// 테스트 의존성 - 스프링 부트 애플리케이션 테스트를 위한 라이브러리
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// JUnit 플랫폼 런처 - JUnit 테스트 실행을 위한 라이브러리
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation 'com.linkedout:common:0.0.1'

	implementation 'io.swagger.core.v3:swagger-models:2.2.18'

	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.3.0'

}

def getVersionName = { ->
	// 환경 변수에서 버전 가져오기 (semantic-release가 설정)
	def version = System.getenv('NEXT_VERSION')
	return version ?: '0.0.1-SNAPSHOT' // 기본값
}

version = getVersionName()

// 테스트 태스크 설정
tasks.named('test') {
	// JUnit 5(Jupiter)를 사용하여 테스트 실행
	useJUnitPlatform()
}